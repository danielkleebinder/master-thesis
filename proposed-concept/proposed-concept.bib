%%% METHODOLOGY %%%
@Article{hevner2004_design_science,
  author = {Alan R. Hevner and Salvatore T. March and Jinsoo Park and Sudha Ram},
  year = {2004},
  month = {03},
  pages = {75--105},
  title = {Design Science in Information Systems Research},
  volume = {28},
  doi = {10.2307/25148625},
  ISSN = {02767783},
  journal = {MIS Quarterly},
  publisher = {Management Information Systems Research Center, University of Minnesota}
}

@Article{denning1997_design_science,
  title = {A new social contract for research},
  author = {Peter J. Denning},
  journal = {Communications of the ACM},
  month = {02},
  year = {1997},
  volume = {40},
  pages = {132--134}
}

@Article{blockchain_and_iot_for_bpm, 
  author={Viriyasitavat, Wattana and Xu, Li Da and Bi, Zhuming and Pungpapong, Vitara},
  journal={IEEE Transactions on Computational Social Systems},
  title={Blockchain and Internet of Things for Modern Business Process in Digital Economy—the State of the Art},   year={2019},
  volume={6},
  number={6},
  pages={1420--1432},
  doi={10.1109/TCSS.2019.2919325}
}

@InBook{weske2012_bpm_architectures,
    author="Weske, Mathias",
    title="Business Process Management Architectures",
    bookTitle="Business Process Management: Concepts, Languages, Architectures",
    year="2012",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="333--371",
    abstract="BPM architectures are in the centre of Chapter 7, starting from the WfMC Architecture and proceeding towards service oriented architectures and architectures for flexible workflow management. In particular, an architecture that allows to dynamically modify running workflow instances based on an object-oriented approach is introduced. Web services and their composition are sketched, describing the core concepts of the XML-based service composition language WS-BPEL. Advanced service composition based on semantic concepts are sketched, and case handling is introduced as a technique for flexible process enactment based on data dependencies rather than process structures.",
    isbn="978-3-642-28616-2",
    doi="10.1007/978-3-642-28616-2_7",
    url="https://doi.org/10.1007/978-3-642-28616-2_7"
}

@TechReport{christel1992_requirements_elicitation,
    title={Issues in Requirements Elicitation},
    author={Michael Christel and Kyo Kang},
    year={1992},
    month={09},
    number={CMU/SEI-92-TR-012},
    institution={Software Engineering Institute, Carnegie Mellon University},
    address={Pittsburgh, PA},
    url={http://resources.sei.cmu.edu/library/asset-view.cfm?AssetID=12553}
}


%%% PROPOSED CONCEPT %%%
@Misc{whats_in_an_event_name,
    author = {Carlston, J.D.},
    title = {What’s in an (event) name?},
    year = {2022},
    month = {01},
    day = {07},
    howpublished = {[Online] Available: \url{https://www.eventstore.com/blog/whats-in-an-event-name}},
    note = {(Accessed 2022-10-17)},
    journal = {Event Store Blog}
}

@Misc{mistakes_in_event_sourcing,
    author = {Nat Pryce},
    title = {Mistakes we made adopting event sourcing (and how we recovered)},
    howpublished = {[Online] Available: \url{http://natpryce.com/articles/000819.html}},
    note = {(Accessed 2022-09-06)},
    journal = {Mistaeks I Hav Made},
    year = {2019},
    month = {06},
    day = {30}
}

@Article{harel1987_statecharts,
    author = {Harel, David},
    title = {Statecharts: A Visual Formalism for Complex Systems},
    year = {1987},
    issue_date = {June 1, 1987},
    publisher = {Elsevier North-Holland, Inc.},
    address = {USA},
    volume = {8},
    number = {3},
    issn = {0167-6423},
    url = {https://doi.org/10.1016/0167-6423(87)90035-9},
    doi = {10.1016/0167-6423(87)90035-9},
    journal = {Sci. Comput. Program.},
    month = {06},
    pages = {231-–274},
    numpages = {44}
}

@Misc{statecharts_spec,
    author = {Jim Barnett and Rahul Akolkar and RJ Auburn and Michael Bodell and Daniel C. Burnett and Jerry Carter and Scott McGlashan and Torbjörn Lager and Mark Helbing and Rafah Hosn and T.V. Raman and Klaus Reifenrath and No'am Rosenthal and Johan Roxendal},
    title = {State Chart XML (SCXML): State Machine Notation for Control Abstraction},
    abstract = {This document describes SCXML, or the "State Chart extensible Markup Language". SCXML provides a generic state-machine based execution environment based on CCXML and Harel State Tables.},
    howpublished = {[Online] Available: \url{https://www.w3.org/TR/scxml/}},
    note = {(Accessed 2022-08-15)},
    month = {09},
    year = {2015},
    journal = {W3C}
}

@Misc{causal_ordering,
    author = {Jamie Brandon},
    title = {Causal ordering},
    howpublished = {[Online] Available: \url{https://www.scattered-thoughts.net/writing/causal-ordering/}},
    note = {(Accessed 2022-08-21)},
    day = {16},
    month = {08},
    year = {2012},
    journal = {Scattered Thoughts}
}

@Misc{fact_vs_delta_event_types,
    author = {Adam Bellemare},
    title = {Fact vs. Delta Event Types},
    howpublished = {[Online] Available: \url{https://developer.confluent.io/learn-kafka/event-design/fact-vs-delta-events/}},
    note = {(Accessed 2022-11-20)},
    day = {12},
    month = {10},
    year = {2022},
    journal = {Confluent Developer}
}

@InProceedings{sequence_diagrams_to_statecharts,
    author = {Ziadi, Tewfik and Hélouët, Loïc and Jézéquel, Jean-Marc},
    year = {2004},
    month = {06},
    pages = {242--251},
    booktitle={Proceedings. 26th International Conference on Software Engineering},
    title = {Revisiting statechart synthesis with an algebraic approach},
    volume = {26},
    isbn = {0-7695-2163-0},
    doi = {10.1109/ICSE.2004.1317446}
}

@InCollection{newman2019_monolith_to_microservices_constantines_law,
  title = {Just Enough Microservices},
  author = {Sam Newman},
  pages = {1--32},
  crossref = {newman2019_monolith_to_microservices}
}

@Book{newman2019_monolith_to_microservices,
  title = {Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith},
  booktitle = {Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith},
  author = {Sam Newman},
  isbn = {9781492047841},
  lccn = {2020276785},
  url = {https://books.google.at/books?id=iul3wQEACAAJ},
  year = {2019},
  month = {11},
  publisher = {O'Reilly Media, Incorporated},
  address = {1005 Gravenstein Highway North, Sebastopol, CA 95472, USA}
}

@Book{event_sourcing_and_cqrs,
    author = {Betts, Dominic and Dominguez, Julian and Melnik, Grigori and Simonazzi, Fernando and Subramanian, Mani},
    title = {Exploring CQRS and Event Sourcing: A Journey into High Scalability, Availability, and Maintainability with Windows Azure},
    year = {2013},
    isbn = {1621140164},
    publisher = {Microsoft patterns \& practices},
    edition = {1st},
    abstract = {This guide is focused on building highly scalable, highly available, and maintainable applications with the Command &amp; Query Responsibility Segregation and the Event Sourcing architectural patterns. It presents a learning journey, not definitive guidance. It describes the experiences of a development team with no prior CQRS proficiency in building, deploying (to Windows Azure), and maintaining a sample real-world, complex, enterprise system to showcase various CQRS and ES concepts, challenges, and techniques. The development team did not work in isolation; we actively sought input from industry experts and from a wide group of advisors to ensure that the guidance is both detailed and practical. The CQRS pattern and event sourcing are not mere simplistic solutions to the problems associated with large-scale, distributed systems. By providing you with both a working application and written guidance, we expect youll be well prepared to embark on your own CQRS journey.}
}

@Article{meyer1988_effeil_and_cqs,
    title = {Eiffel: A language and environment for software engineering},
    journal = {Journal of Systems and Software},
    volume = {8},
    number = {3},
    pages = {199--246},
    year = {1988},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/0164-1212(88)90022-2},
    url = {https://www.sciencedirect.com/science/article/pii/0164121288900222},
    author = {Bertrand Meyer},
    abstract = {The Eiffel language and environment address the problem of building quality software in practical development environments. Two software quality factors were deemed essential in the design of the language: reusability and reliability. They led to the following choices: language features that support the underlying bottom-up software design methodology; modular structures based on the object-oriented approach, with support for both generic parameters and multiple inheritance (including a new extension, repeated inheritance); automatic storage management; highly dynamic execution model; support for polymorphism and dynamic binding; fully static typing; information hiding facilities; assertions and invariants that may be monitored at run-time. The Eiffel programming environment, using C as an intermediate language, supports separate compilation of classes and achieves a good run-time performance in both space and time. The environment takes care of automatically recompiling classes as needed after a change, ensuring that only up-to-date versions of classes are used, but avoiding unnecessary recompilations. A set of tools is provided to support the development of sizable software systems. An important part of the environment is the library of reusable classes. Significant extracts of this library are given in the appendix to this article, providing a set of model reusable software components, carefully designed for robustness and extendibility.}
}

@InCollection{geirhos2015_design_patterns_behavioral,
  title = {Verhaltensmuster},
  author = {Matthias Geirhos},
  pages = {343--350},
  crossref = {geirhos2015_design_patterns}
}

@Book{geirhos2015_design_patterns,
  title = {Entwurfsmuster -- Das umfassende Handbuch},
  booktitle = {Entwurfsmuster -- Das umfassende Handbuch},
  author = {Matthias Geirhos},
  isbn = {9783836227629},
  url = {https://www.rheinwerk-verlag.de/entwurfsmuster-das-umfassende-handbuch/},
  year = {2015},
  publisher = {Rheinwerk Computing},
  address = {Rheinwerkallee 4, 53227 Bonn, Germany}
}

@Article{vogels2009_eventually_consistent,
    author = {Vogels, Werner},
    title = {Eventually Consistent},
    year = {2009},
    issue_date = {January 2009},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {52},
    number = {1},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/1435417.1435432},
    doi = {10.1145/1435417.1435432},
    abstract = {Building reliable distributed systems at a worldwide scale demands trade-offs between consistency and availability.},
    journal = {Commun. ACM},
    month = {01},
    pages = {40–-44},
    numpages = {5}
}


%%% PROTOTYPE DESIGN %%%
@Misc{iso_timestamps,
    title = {Data elements and interchange formats -- Information interchange -- Representation of dates and times},
    howpublished = {[Online] Available: \url{https://www.iso.org/standard/40874.html}},
    year = {2004},
    note = {(Accessed 2022-09-05)},
    key = {ISO},
    journal = {International Organization for Standardization}
}

